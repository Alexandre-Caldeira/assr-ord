function [signals, params] = genSimulatedSignals(params) 
% genSimulatedSignals generates simulated EEG signals (noise + sinusoidal signal). 
    duration = params.duration; % seconds 
    nChannels = params.nChannels;
    totalSamples = params.Fs * duration * nChannels; 
    % 
    t = (0:totalSamples-1) / params.Fs;
    % % White noise generation
    % noise = randn(1, totalSamples);
    % 
    % % Sinusoidal component (e.g., 80 Hz stimulation)
    % freqStim = 80;
    % signal = sin(2*pi*freqStim*t);
    % 
    % % Adjust amplitude based on SNR (convert dB to linear scale)
    % snr_linear = 10^(params.sim.signalSNR/20);
    % signal = signal * snr_linear;
    % 
    % % Combine the noise and signal
    % signals = noise + signal;
    % 
    % % For multi-channel simulation, replicate the signal (e.g., 2 channels)
    % % signals = repmat(signals, nChannels, 1);
    % signals = reshape(signals, [nChannels, params.Fs, duration]); 


    s1 = 0;
    for i = 1:numel(params.signalFrequencies)
        fo = params.signalFrequencies(i); 
        s1 = s1+sin(2*pi*fo*t);
    end
   
    sinal = reshape(signals, [nChannels, params.Fs, duration]);    
    for janela = 1:Njanelas
        % Adiciona ruido gaussiano branco com SNR aleatoria 
        noise_mean = -20; % very high = -25
        % noise_var_mean = 2^2;
        % noise_var_var = 2.5^2;
        % noise_var = @() (noise_var_mean+ sqrt(noise_var_var)*randn(1));
        noise_sd = @() randi([1,45],1)/10;
        snr = @() noise_mean+noise_sd()*randn(1);
        sinal(:,janela) = awgn(sinal(:,janela),snr(),'measured','db')';
    end
end